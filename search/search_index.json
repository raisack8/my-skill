{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u30db\u30fc\u30e0","text":""},{"location":"aws-first-01/","title":"AWS","text":""},{"location":"bat-01/","title":"Bat","text":""},{"location":"gcp-first-01/","title":"GCP","text":""},{"location":"hack-vscode-01/","title":"VSCODE","text":""},{"location":"psql-01/","title":"PostgreSQL","text":""},{"location":"python/py-django-01/","title":"Django","text":""},{"location":"python/py-fastapi-01/","title":"FastAPI","text":""},{"location":"python/py-fastapi-01/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>FastAPI\u306fDjango\u3068\u7570\u306a\u308a\u5fc5\u8981\u3082\u306e\u3060\u3051\u3092\u53d6\u308a\u5165\u308c\u3066\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 Django\u3067\u3044\u3046\u3068\u3001\u30b3\u30de\u30f3\u30c9\u4e00\u3064\u3067\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3084DB\u306eORM\u3001\u30eb\u30fc\u30bf\u30fc\u3084\u7ba1\u7406\u753b\u9762\u306a\u3069\u3001\u3042\u308a\u3068\u3042\u3089\u3086\u308b\u30c4\u30fc\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u3001\u975e\u5e38\u306b\u4fbf\u5229\u3060\u304c\u3001\u305d\u306e\u53cd\u9762\u591a\u5c11\u91cd\u3044\u3002 FastAPI\u306f\u5fc5\u8981\u306a\u3082\u306e\u3092\u5fc5\u8981\u306a\u6642\u3060\u3051\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3001\u4f59\u8a08\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u7701\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u4f8b\u3048\u3070DB\u304c\u4f7f\u3044\u305f\u3044\u3068\u304d\u306f<code>SQL Alchemy</code>\u3092\u3001\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f<code>Alembic</code>\u3092\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3088\u3044\u3002 Django\u3067\u306f\u305d\u308c\u3089\u306e\u30c4\u30fc\u30eb\u3092\u7c21\u5358\u306b\u4f7f\u3048\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001FastAPI\u306f\u4e00\u304b\u3089\u305d\u308c\u3089\u3092\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u53d6\u5f97\u30ec\u30d9\u30eb\u3068\u3057\u3066\u306f\u591a\u5c11\u9ad8\u304f\u306a\u308b\u3002 \u3053\u3053\u3067\u306f\u3001\u305d\u306eFastAPI\u3092\u307e\u3068\u3081\u308b\u3002</p>"},{"location":"python/py-fastapi-01/#_2","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":"<p>\u79c1\u304c\u3088\u304f\u4f7f\u3046\u6700\u5c0f\u9650\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f<code>fastapi</code>\u3001<code>sqlalchemy</code>\u3001<code>uvicorn</code>\u3068\u306a\u308a\u3001\u305d\u308c\u3089\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c\u306e<code>requirements.txt</code>\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002</p> <p>requirements.txt <pre><code>annotated-types==0.6.0\nanyio==3.7.1\nclick==8.1.7\ncolorama==0.4.6\nexceptiongroup==1.2.0\nfastapi==0.105.0\ngreenlet==3.0.3\nh11==0.14.0\nidna==3.6\npydantic==2.5.3\npydantic_core==2.14.6\nsniffio==1.3.0\nSQLAlchemy==2.0.23\nstarlette==0.27.0\ntyping_extensions==4.9.0\n</code></pre></p> <p>\u4e0b\u8a18\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092main.py\u306b\u4f5c\u6210\u3057\u3066\u307f\u308b\u3002 GET\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u6587\u5b57\u5217\u3092\u8fd4\u3059\u3060\u3051\u3002 main.py <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n</code></pre> \u4eee\u60f3\u74b0\u5883\u3092\u4f5c\u6210\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5 <pre><code>uvicorn main:app --reload\n</code></pre></p> <p>Note</p> <p><code>--reload</code>\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u30db\u30c3\u30c8\u30ea\u30ed\u30fc\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002</p> <p>\u30db\u30b9\u30c8\u3084\u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b <pre><code>uvicorn main:app --reload --host 0.0.0.0 --port 8000\n</code></pre></p>"},{"location":"python/py-fastapi-01/#pydantic","title":"Pydantic","text":"<p>\u30bf\u30a4\u30d7\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u3046\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u578b\u306a\u3069\u3092\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 <pre><code>from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root(\n    name: str = Query(\n        ..., \n        title=\"\u4eba\u306e\u540d\u524d\", \n        description=\"\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306f\u4eba\u306e\u540d\u524d\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\", \n        example=\"Yoko\"\n    ),\n):\n    return {\"Hello\": name}\n</code></pre> <code>localhost:8000/?name=Takeru</code>\u3067<code>Takeru</code>\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002</p> <p>\u3069\u3061\u3089\u304b\u306e\u578b\u3092\u8a31\u5bb9\u3059\u308b <pre><code>from typing import Union\n...\nuser_id: Union[str, None]\n</code></pre> \u5fc5\u9808\u30c1\u30a7\u30c3\u30af\u306a\u3057 <pre><code>user_id: str | None = None\n</code></pre> \u72ec\u81ea\u306e\u578b\u3092\u5ba3\u8a00\u3059\u308b\u5834\u5408 <pre><code>from pydantic import BaseModel\n\nclass PersonalData(BaseModel):\n    name: str = \"\"\n    age: int = 0\n\n@app.get(\"/\")\ndef read_root(\n    data: PersonalData\n):\n    return {\"Hello\": data.name, \"age\": data.age}\n</code></pre> \u7279\u5b9a\u306e\u6587\u5b57\u5217\u3057\u304b\u8a31\u5bb9\u3057\u306a\u3044\u5834\u5408 <pre><code>class FruitEnum(str, Enum):\n    APPLE = \"Apple\"\n    BANANA = \"Banana\"\n    GRAPE = \"Grape\"\n    ORANGE = \"Orange\"\n\nclass UserData(BaseModel):\n    Fruit: FruitEnum = Field(...\n</code></pre></p> <p>FastAPI \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u6587\u5b57\u5217\u306e\u691c\u8a3c</p> <p><code>BaseModel</code>\u306b\u3088\u308a\u4e00\u5c64\u306e\u60c5\u5831\u3092\u4ed8\u4e0e\u3059\u308b <pre><code>from pydantic import BaseModel, Field\n\nclass User(BaseModel):\n    name: str = Field(\n        ..., # \u5fc5\u9808:\"...\" , Optional: \"None\"\n        default=\"Takeshi\",\n        description=\"\u7537\u306e\u5b50\u306e\u540d\u524d\",\n        examples=\"Yuto\"\n    )\n    phone: str = Field(\n        ...,\n        max_length=13, # \u6700\u5927\u6587\u5b57\u5217\u3082\u8a2d\u5b9a\u53ef\u80fd\n        pattern=r\"^\\d{3}-\\d{4}-\\d{4}$\" # \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c1\u30a7\u30c3\u30af\u3082\u53ef\u80fd\n    )\n</code></pre></p> <p>\u4ee5\u4e0b\u306e\u3088\u3046\u306b<code>response_model</code>\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002</p> <pre><code>@app.get(\n    \"/\",\n    response_model=User\n    )\ndef read_root(\n    data: PersonalData\n):\n    return {\"name\": name, \"phone\": phone}\n</code></pre>"},{"location":"python/py-fastapi-01/#db","title":"DB\u8a2d\u5b9a","text":"<p>\u4ee5\u4e0b\u3092\u4f5c\u6210\u3057\u3001main.py\u3067import\u3059\u308c\u3070DB\u64cd\u4f5c\u304c\u3067\u304d\u308b\u3002 database.py <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./data.db\"\n# PostgreSQL\u3092\u4f7f\u3046\u5834\u5408\u306f\u4e0b\u3092\u4f7f\u3046\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\nBase.metadata.create_all(bind=engine)\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre></p> <p>\u3053\u306e<code>get_db()</code>\u3092main.py\u3067\u547c\u3073\u51fa\u3057\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u969b\u306b<code>Session</code>\u3092\u4f5c\u6210\u3059\u308b\u3002</p> <pre><code>from fastapi import Depends\nfrom sqlalchemy.orm import Session\nfrom ..models.database import get_db # dir\u69cb\u6210\u6b21\u7b2c\n\n@app.get(\"/\")\ndef read_root(\n    db: Session = Depends(get_db),\n):\n    data = DbClient(db) # \u4f8b) DB\u306b\u63a5\u7d9a\u3057\u3066\u7279\u5b9a\u306e\u5024\u3092\u53d6\u5f97\n    return {\"data\": data}\n</code></pre>"},{"location":"python/py-fastapi-01/#api-router","title":"API Router","text":"<p>\u51e6\u7406\u306e\u7a2e\u985e\u306b\u5fdc\u3058\u3066\u5225\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 main.py <pre><code>from fastapi import FastAPI\nfrom src.apis import user\n\napp = FastAPI()\n\napp.include_router(user.router, tags=[\"user\"])\n</code></pre></p> <p>src/apis/user.py <pre><code>from fastapi import APIRouter, Header, Depends\n\nrouter = APIRouter()\n\ntop_level = \"user\"\n\n@router.post(\n    f\"/{top_level}/info\",\n    name=\"\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u53d6\u5f97API\",\n    description=\"Header\u306ex_user_id\u3092\u8aad\u307f\u53d6\u3063\u3066\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u8fd4\u3059\",\n)\ndef post_user_info(\n    db: Session = Depends(get_db),\n    # \u30d5\u30ed\u30f3\u30c8\u3067\"headers\"\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u5024\u3092\u53d6\u5f97\u3059\u308b\n    x_user_id: Union[str, None] = Header(None, alias=\"x-key\"),\n):\n    ...\n</code></pre></p>"},{"location":"python/py-fastapi-01/#sql-alchemy","title":"SQL Alchemy","text":""},{"location":"python/py-fastapi-01/#basemodel","title":"BaseModel","text":"<p>src/models/base.py <pre><code>from datetime import datetime\n\nfrom sqlalchemy import Column, DateTime\nfrom sqlalchemy.ext.declarative import declared_attr\n\n\nclass OrgBaseModel(object):\n    @declared_attr\n    def created_at(cls):\n        return Column(DateTime, default=datetime.now, nullable=False)\n\n    @declared_attr\n    def updated_at(cls):\n        return Column(\n            DateTime, default=datetime.now, onupdate=datetime.now, nullable=False\n        )\n</code></pre></p> <p>src/models/t_user.py <pre><code>from sqlalchemy import UUID, Boolean, Column, Integer, String\n\nfrom .base import OrgBaseModel\nfrom .database import Base, engine\n\n\nclass TUser(Base, OrgBaseModel):\n    __tablename__ = \"t_user\"\n\n    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)\n    name = Column(String, index=True, nullable=False)\n    icon_type = Column(Integer, default=1, nullable=False\n        comment\"0: \u30e6\u30fc\u30b6\u30fc\u30a2\u30a4\u30b3\u30f3, 1: \u30c8\u30c3\u30d7\u30a2\u30a4\u30b3\u30f3\")\n    uuid = Column(UUID, index=True, nullable=False)\n\n# DB\u306b\u63a5\u7d9a\u3057\u3066\u3001\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u30c6\u30fc\u30d6\u30eb\u3092CREATE\u3059\u308b\u51e6\u7406\nBase.metadata.create_all(bind=engine, checkfirst=True)\n</code></pre></p>"},{"location":"python/py-fastapi-01/#crud","title":"CRUD","text":""},{"location":"python/py-fastapi-01/#create","title":"create","text":"<pre><code>from typing import Union\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom ..models.m_item import MItem\n\n\nclass MItemCrud:\n    def insert_m_item(\n        db: AsyncSession,\n        name: str,\n    ) -&gt; Union[MItem, None]:\n        try:\n            item = MItem(\n                name=name,\n            )\n            db.add(item)\n            db.commit()\n            return item\n        except Exception as e:\n            logger.error(e)\n            db.rollback()\n            return None\n</code></pre>"},{"location":"python/py-fastapi-01/#read","title":"read","text":"<pre><code>from typing import Union\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom ..models.m_item import MItem\n\n\nclass MItemCrud:\n    def select_m_item_by_id(\n        db: AsyncSession,\n        index: int,\n    ) -&gt; Union[MItem, None]:\n        try:\n            result = (\n                db.query(MItem)\n                .filter(\n                    MItem.id == index,\n                )\n                .first()\n            )\n            return result\n        except Exception as e:\n            logger.error(e)\n            db.rollback()\n            return None\n</code></pre>"},{"location":"python/py-fastapi-01/#update","title":"update","text":"<pre><code>from typing import Union\nfrom uuid import UUID, uuid4\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom ..models.t_user import TUser\nfrom ..repositories.type import UserBaseInfoType\n\nclass TUserCrud:\n    def update_t_user(\n        db: AsyncSession, data: UserBaseInfoType, user_id: str\n    ) -&gt; Union[TUser, None]:\n        try:\n            user = db.query(TUser).filter(TUser.uuid == UUID(user_id)).first()\n            user.name = data.name\n            db.commit()\n            return user\n        except Exception as e:\n            logger.error(e)\n            db.rollback()\n            return None\n</code></pre>"},{"location":"python/py-fastapi-01/#delete","title":"delete","text":"<pre><code>from typing import Union\nfrom uuid import UUID, uuid4\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom ..models.t_user_material_bag import TUserMaterialBag\n\nclass TUserMaterialBagCrud:\n    def delete_t_user_material_bag(\n        db: AsyncSession,\n        item_id: int,\n        uuid: str,\n    ) -&gt; Union[TUserMaterialBag, None]:\n        try:\n            item = (\n                db.query(TUserMaterialBag).first()\n            )\n            db.delete(item)\n            db.commit()\n            return item\n        except Exception as e:\n            logger.error(e)\n            db.rollback()\n            return None\n</code></pre>"},{"location":"python/py-fastapi-01/#upsert","title":"upsert","text":"<pre><code>from typing import Union\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom ..models.m_item import MItem\n\n\nclass MItemCrud:\n    def updata_m_item(db, data):\n        try:\n            items_to_update_or_create = []\n            for item_data in data:\n                item = db.query(MItem).filter_by(id=item_data[\"id\"]).first()\n                if item:\n                    # \u65e2\u5b58\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u66f4\u65b0\n                    item.name = item_data[\"name\"]\n                else:\n                    # \u65b0\u3057\u3044\u30a2\u30a4\u30c6\u30e0\u3092\u8ffd\u52a0\n                    item = MItem(**item_data)\n                items_to_update_or_create.append(item)\n            db.bulk_save_objects(items_to_update_or_create)\n            db.commit()\n        except Exception as e:\n            logger.error(e)\n            db.rollback()\n            return None\n</code></pre>"},{"location":"python/py-fastapi-01/#mainpy","title":"main.py \u30c6\u30f3\u30d7\u30ec","text":"<pre><code>from fastapi import FastAPI, Request, status\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import JSONResponse\n\nfrom src.apis import act, websocket\nfrom src.common.logger import logger\n\napp = FastAPI()\n\ntarget_host = \"192.168.0.20\"\ntarget_port_front = 3000\ntarget_port_ws = 8000 # WebSocket\u7528\u306e\u30dd\u30fc\u30c8\n\norigins = [\n    f\"http://{target_host}:{target_port_ws}\",\n    f\"http://{target_host}:{target_port_front}\",\n]\n\n# CORS\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u306e\u8a2d\u5b9a\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.exception_handler(RequestValidationError)\nasync def handler(request: Request, exc: RequestValidationError):\n    logger.error(request.headers)\n    logger.error(exc)\n    return JSONResponse(content={}, status_code=status.HTTP_422_UNPROCESSABLE_ENTITY)\n\napp.include_router(act.router, tags=[\"act\"])\napp.include_router(websocket.router, tags=[\"websocket\"])\n</code></pre>"},{"location":"python/py-fastapi-01/#websocket","title":"WebSocket\u7528\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30c6\u30f3\u30d7\u30ec","text":"<pre><code>import json\n\nfrom fastapi import APIRouter, Depends, WebSocket, WebSocketDisconnect\nfrom sqlalchemy.orm import Session\n\nfrom ..common.response import get_user_id\nfrom ..crud.t_chat_message import TChatMessageCrud\nfrom ..crud.t_user import TUserCrud\nfrom ..models.database import get_db\nfrom ..repositories.type import ChatPostType\n\nrouter = APIRouter()\n\ntop_level = \"ws\"\n\n\n@router.websocket(f\"/{top_level}/chat\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    db: Session = Depends(get_db),\n):\n    await websocket.accept()\n    try:\n        while True:\n            # websocket\u304b\u3089post\u3055\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u53d6\u5f97\n            data_text = await websocket.receive_text()\n            # json\u306b\u5909\u63db\n            data = json.loads(data_text)\n            # DB\u64cd\u4f5c\u306e\u70ba\u578b\u306b\u5f53\u3066\u306f\u3081\u308b\n            user_id = get_user_id(data[\"key\"])\n            chat_data = ChatPostType(\n                message=data[\"message\"],\n                color=int(data[\"color\"]),\n                mention={\n                    \"user_name\": data[\"mention\"][\"user_name\"],\n                    \"open_user_id\": data[\"mention\"][\"open_user_id\"],\n                },\n            )\n\n            # \u767b\u9332\u3057\u3066\u767b\u9332\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059\n            user = TUserCrud.select_t_user_by_uuid(db, user_id)\n            chat = TChatMessageCrud.insert_t_chat_message(db, user_id, chat_data, user)\n            data = {\n                \"user_name\": chat.user_name,\n                \"message\": chat.message,\n                \"open_user_id\": chat.open_user_id,\n                \"created_at\": chat.created_at.strftime(\"%Y-%m-%d %H:%M:%S\"),\n            }\n            await websocket.send_text(\n                json.dumps(\n                    {\n                        \"code\": 200,\n                        \"message\": \"WebSocket\",\n                        \"data\": {\"chats\": data, \"open_id\": user.open_user_id},\n                    }\n                )\n            )\n    except WebSocketDisconnect:\n        print(\"WebSocket connection closed\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n        await websocket.close()\n</code></pre>"},{"location":"python/py-fastapi-01/#user_id","title":"user_id\u6697\u53f7\u5316\u30c6\u30f3\u30d7\u30ec","text":"<p>response.py <pre><code>from fastapi import Header\n\nfrom .code import Code\n\n\ndef get_user_id(x_key: str = Header(None, alias=\"x-key\")):\n    \"\"\"\n    \u30d8\u30c3\u30c0\u30fc\u304b\u3089\u6697\u53f7\u5316\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fcID\u3092\u53d6\u5f97\u3057\u3001\n    \u5fa9\u53f7\u5316\u3057\u3066\u8fd4\u3059\u3002\n    \u5fa9\u53f7\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u8a8d\u8a3c\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\n    \"\"\"\n    if x_key == \"\" or x_key == None:\n        return \"\"\n    else:\n        try:\n            decrypted_message = Code.decrypt_message(x_key)\n            return decrypted_message\n        except:\n            return \"\"\n</code></pre></p> <p>\u30d1\u30b9\u30ef\u30fc\u30c9\u30d9\u30fc\u30b9\u6697\u53f7\u5316 code.py <pre><code>import base64\n\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom fastapi import HTTPException\n\nfrom .const import CODE_PASSPHRASE\n\n\nclass Code:\n    # \u6697\u53f7\u5316\u95a2\u6570\n    def encrypt_message(message: str) -&gt; bytes:\n        key = Code.generate_key_from_passphrase(CODE_PASSPHRASE)\n        fernet = Fernet(key)\n        return str(fernet.encrypt(message.encode()))[2:-1]\n\n    # \u5fa9\u53f7\u5316\u95a2\u6570\n    def decrypt_message(encrypted_message: bytes) -&gt; str:\n        try:\n            key = Code.generate_key_from_passphrase(CODE_PASSPHRASE)\n            fernet = Fernet(key)\n            return fernet.decrypt(encrypted_message.encode(\"utf-8\")).decode(\"utf-8\")\n        except Exception as e:\n            raise HTTPException(\n                status_code=400, detail=\"Invalid encryption or corrupted data\"\n            )\n\n    # \u30d1\u30b9\u30d5\u30ec\u30fc\u30ba\u304b\u3089\u30ad\u30fc\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\n    def generate_key_from_passphrase(passphrase: str) -&gt; bytes:\n        passphrase = passphrase.encode()  # \u30d1\u30b9\u30d5\u30ec\u30fc\u30ba\u3092bytes\u578b\u306b\u5909\u63db\n        salt = (\n            b\"salt_\"  # \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5411\u4e0a\u306e\u305f\u3081\u306e\u30bd\u30eb\u30c8\uff08\u5b9f\u969b\u306b\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3092\u4f7f\u3046\u3079\u304d\uff09\n        )\n        kdf = PBKDF2HMAC(\n            algorithm=hashes.SHA256(),\n            length=32,\n            salt=salt,\n            iterations=390000,\n            backend=default_backend(),\n        )\n        key = base64.urlsafe_b64encode(kdf.derive(passphrase))  # \u5b89\u5168\u306a\u9375\u3092\u751f\u6210\n        return key\n</code></pre></p>"},{"location":"python/py-mkdocs-01/","title":"MkDocks","text":""},{"location":"python/py-pathlib-01/","title":"Pathlib","text":""},{"location":"python/py-pytest-01/","title":"Pytest","text":""},{"location":"python/py-subpro-01/","title":"subprocess","text":""},{"location":"react/re-first-01/","title":"React","text":""},{"location":"react/re-hooks-01/","title":"Hooks","text":""},{"location":"stablediffusion/sd-first-01/","title":"Stable Diffusion","text":""},{"location":"stablediffusion/sd-prompt-01/","title":"\u30d7\u30ed\u30f3\u30d7\u30c8","text":""}]}